from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command

# parse_pos
from handlers.ParsePos import get_pos

# start_command
from handlers.CommandStart import start_command

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import OptionsMenu, YesOrNoMenu, MainMenu


@dp.message_handler(state=StateMachine.Main)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µüìò":
        await message.answer("‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ç–æ –≤–∞—à ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞/–°–ù–ò–õ–° –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

        counter_step = 0
        step = int(await select_db("users", "user_id", "step", user_id))
        while counter_step < step:
            info_id = str(counter_step) + '#' + user_id
            vuz = str(await select_db("info", "info_id", "vuz", info_id))
            inst = str(await select_db("info", "info_id", "inst", info_id))
            nap = str(await select_db("info", "info_id", "nap", info_id))
            form = str(await select_db("info", "info_id", "form", info_id))
            cat = str(await select_db("info", "info_id", "cat", info_id))

            main_id = vuz + '#' + inst + '#' + nap + '#' + form + '#' + cat + '#' + user_id

            vuz_name = str(await select_db("main", "main_id", "vuz_name", main_id))
            inst_name = str(await select_db("main", "main_id", "inst_name", main_id))
            nap_name = str(await select_db("main", "main_id", "nap_name", main_id))
            form_name = str(await select_db("main", "main_id", "form_name", main_id))
            cat_name = str(await select_db("main", "main_id", "cat_name", main_id))
            pos = str(await select_db("main", "main_id", "pos", main_id))
            sogl_pos = str(await select_db("main", "main_id", "sogl_pos", main_id))
            max_sogl = str(await select_db("main", "main_id", "max_sogl", main_id))

            await message.answer(f"üîπ–í–£–ó: {vuz_name}\n"
                                 f"üîπ–ò–Ω—Å—Ç–∏—Ç—É—Ç/–§–∞–∫—É–ª—å—Ç–µ—Ç: {inst_name}\n"
                                 f"üîπ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/C–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {nap_name}\n"
                                 f"üîπ–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {form_name}\n"
                                 f"üîπ–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}\n"
                                 f"üî∏–ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                                 f"üî∫–ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –°–æ–≥–ª–∞—Å–∏–π: {sogl_pos}/{max_sogl}")

            counter_step += 1

    if message.text == "–ü–æ–¥–ø–∏—Å–∫–∞üì•":
        await message.answer("üì•–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç?", reply_markup=YesOrNoMenu)
        await StateMachine.Podpis.set()

    if message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏üåÄ":
        await message.answer("üåÄ–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=OptionsMenu)
        await StateMachine.OptionsMainButtons.set()


@dp.message_handler(state=StateMachine.Podpis)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    if message.text == "–î–∞‚úÖ":
        await update_db("users", "user_id", "podpis", user_id, 1)
        await message.answer("üîî–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞", reply_markup=MainMenu)
        await StateMachine.Main.set()

    if message.text == "–ù–µ—Ç‚ùå":
        await update_db("users", "user_id", "podpis", user_id, 0)
        await message.answer("üîï–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", reply_markup=MainMenu)
        await StateMachine.Main.set()
