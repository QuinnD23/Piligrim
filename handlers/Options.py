from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Command

# parse_pos
from handlers.ParsePos import get_pos

# start_command
from handlers.CommandStart import start_command

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import NapOptionsMenu, MainMenu


@dp.message_handler(state=StateMachine.OptionsMainButtons)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    # ----- back ------
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await message.answer("üîπ–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MainMenu)
        await StateMachine.Main.set()
    # -----------------

    if message.text == "ID –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞/–°–ù–ò–õ–°üîπ":
        snls = await select_db("users", "user_id", "snls", user_id)
        await message.answer(f"üìò–í–∞—à —Ç–µ–∫—É—â–∏–π ID –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞/–°–ù–ò–õ–°: {snls}", reply_markup=ReplyKeyboardRemove())

        await message.answer("üîñ–ü—Ä–∏–º–µ—Ä –°–ù–ò–õ–°: 123-456-789-10\n"
                             "üîπ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞/–°–ù–ò–õ–°:")
        await StateMachine.SnlsOption.set()

    if message.text == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—èüìò":
        await message.answer("üìñ–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:", reply_markup=NapOptionsMenu)

        counter_step = 0
        step = int(await select_db("users", "user_id", "step", user_id))
        while counter_step < step:
            info_id = str(counter_step) + '#' + user_id
            vuz = str(await select_db("info", "info_id", "vuz", info_id))
            inst = str(await select_db("info", "info_id", "inst", info_id))
            nap = str(await select_db("info", "info_id", "nap", info_id))
            form = str(await select_db("info", "info_id", "form", info_id))
            cat = str(await select_db("info", "info_id", "cat", info_id))

            main_id = vuz + '#' + inst + '#' + nap + '#' + form + '#' + cat + '#' + user_id

            vuz_name = str(await select_db("main", "main_id", "vuz_name", main_id))
            inst_name = str(await select_db("main", "main_id", "inst_name", main_id))
            nap_name = str(await select_db("main", "main_id", "nap_name", main_id))
            form_name = str(await select_db("main", "main_id", "form_name", main_id))
            cat_name = str(await select_db("main", "main_id", "cat_name", main_id))

            await message.answer(f"{counter_step+1}‚ô¶Ô∏è–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                                 f"üîπ–í–£–ó: {vuz_name}\n"
                                 f"üîπ–ò–Ω—Å—Ç–∏—Ç—É—Ç/–§–∞–∫—É–ª—å—Ç–µ—Ç: {inst_name}\n"
                                 f"üîπ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/C–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {nap_name}\n"
                                 f"üîπ–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {form_name}\n"
                                 f"üîπ–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}")

            counter_step += 1

        await message.answer("üìò–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        await StateMachine.WaitNapCommand.set()


@dp.message_handler(state=StateMachine.WaitNapCommand)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    # ----- back ------
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await message.answer("üîπ–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MainMenu)
        await StateMachine.Main.set()
    # -----------------

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å‚úÖ":
        step = int(await select_db("users", "user_id", "step", user_id))
        if step == 5:
            await message.answer("‚ùóÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            await message.answer("‚ö°Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä\n"
                                 "üîπ–í—ã–±–µ—Ä–∏—Ç–µ –í–£–ó:", reply_markup=ReplyKeyboardRemove())

            await message.answer("üìñ–°–ø–∏—Å–æ–∫:\n"
                                 "1. –ö–§–£\n"
                                 "2. –ù–∞–±.–ß–µ–ª–Ω—ã\n"
                                 "3. –ï–ª–∞–±—É–≥–∞")

            await update_db("users", "user_id", "check_max", user_id, 3)

            await StateMachine.VuzInfo.set()

    if message.text == "–£–¥–∞–ª–∏—Ç—å‚ùå":
        await message.answer("‚ö°Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä\n"
                             "üîπ–í—ã–±–µ—Ä–∏—Ç–µ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
        await StateMachine.DeleteNapNum.set()


@dp.message_handler(state=StateMachine.DeleteNapNum)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    else:
        num = message.text
        check_num = True
        try:
            num = int(num)
        except:
            check_num = False

        if check_num:
            check_table = True
            step = int(await select_db("users", "user_id", "step", user_id))
            if num < 1 or num > step:
                check_table = False

            if check_table:
                info_id = str(num-1) + '#' + user_id
                await delete_db("info", "info_id", info_id)

                # –°–¥–≤–∏–≥
                —Åounter_step = 0
                delete_id = 0
                while —Åounter_step < step:
                    info_id = str(—Åounter_step) + '#' + user_id
                    try:
                        vuz = int(await select_db("info", "info_id", "vuz", info_id))
                    except:
                        —Åounter_step += 1
                        continue

                    new_info_id = str(delete_id) + '#' + user_id
                    await update_db("info", "info_id", "info_id", info_id, new_info_id)
                    delete_id += 1

                    —Åounter_step += 1

                await update_db("users", "user_id", "step", user_id, delete_id)

                await message.answer("‚ö°Ô∏è–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=MainMenu)

                await StateMachine.Main.set()
            else:
                await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        else:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


@dp.message_handler(state=StateMachine.SnlsOption)
async def mes_state(message: Message):
    user_id = str(message.from_user.id)

    # ----- start -----
    if message.text == "/start":
        await start_command(user_id, dp)
    # -----------------

    else:
        snls = message.text
        await update_db("users", "user_id", "snls", user_id, snls)

        counter_step = 0
        step = int(await select_db("users", "user_id", "step", user_id))
        while counter_step < step:
            info_id = str(counter_step) + '#' + user_id
            vuz = int(await select_db("info", "info_id", "vuz", info_id))
            inst = int(await select_db("info", "info_id", "inst", info_id))
            nap = int(await select_db("info", "info_id", "nap", info_id))
            form = int(await select_db("info", "info_id", "form", info_id))
            cat = int(await select_db("info", "info_id", "cat", info_id))

            main_id = str(vuz) + '#' + str(inst) + '#' + str(nap) + '#' + str(form) + '#' + str(cat) + '#' + user_id

            await get_pos(vuz, inst, nap, form, cat, snls, main_id, info_id)

            counter_step += 1

        # –°–¥–≤–∏–≥
        —Åounter_step = 0
        delete_id = 0
        while —Åounter_step < step:
            info_id = str(—Åounter_step) + '#' + user_id
            try:
                vuz = int(await select_db("info", "info_id", "vuz", info_id))
            except:
                —Åounter_step += 1
                continue

            new_info_id = str(delete_id) + '#' + user_id
            await update_db("info", "info_id", "info_id", info_id, new_info_id)
            delete_id += 1

            —Åounter_step += 1

        await update_db("users", "user_id", "step", user_id, delete_id)

        if delete_id == 0:
            await message.answer("‚ùóÔ∏è–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑")
            await start_command(user_id, dp)
        else:
            await message.answer("üåÄ", reply_markup=MainMenu)
            await StateMachine.Main.set()
